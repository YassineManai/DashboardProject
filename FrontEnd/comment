/* sign up js : 
  var pwd = document.getElementById('pwd');
    var eye = document.getElementById('eye');

    eye?.addEventListener('click', togglePass);

    function togglePass() {

        eye.classList.toggle('active');

        (pwd.type == 'password') ? pwd.type = 'text' : pwd.type = 'password';
    }
    function checkStuff() {
        var email = document.form1.email;
        var password = document.form1.password;
        var msg = document.getElementById('msg');

        if (email.value == "") {
            msg.style.display = 'block';
            msg.innerHTML = "Please enter your email";
            email.focus();
            return false;
        } else {
            msg.innerHTML = "";
        }

        if (password.value == "") {
            msg.innerHTML = "Please enter your password";
            password.focus();
            return false;
        } else {
            msg.innerHTML = "";
        }
        var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        if (!re.test(email.value)) {
            msg.innerHTML = "Please enter a valid email";
            email.focus();
            return false;
        } else {
            msg.innerHTML = "";
        }
    } 
    
    
    
    
    
    
    Error eli jawouna :3 
    
    
    XHTTP ... ====> App corse lezim importeha mil fou9 
    Throw MidleWhere ==> makech 3ammel Export 
    hyetna khayba

    


     Sidemenu.current.forEach(item => {
        const li = item.parentElement ;
        const funcion handleclick (){
            Sidemenu.current.forEach(i =>{
                i.parentElement.classList.remove('active')
            })
            li.classList.add('active')

        }
    });









router.post('/CreateDailySheet/:id', async (req, res) => {

    try {
        const idUser = req.params.id;
        data = req.body;
        data.UserId = idUser
        Dsheet = new DailySheet(data);
        savedDsheet = await Dsheet.save();
        res.status(200).send(savedDsheet)
    }

    catch (error) {
        res.status(404).send(error)
    }

})
































router.post('/CreateDailySheet/:id', async (req, res) => {

    try {
      const idUser = req.params.id;
      data = req.body;
      data.UserId = idUser
      // Create new daily sheet entry from request body
      const dailySheet = new DailySheet(req.body);
      await dailySheet.save();
      
      // Update monthly sheet for the same user and month
      const options = { month: 'long' };
      const { UserId, Date: dateString, TypeJ } = req.body;
      const month = new Date(dateString).toLocaleString('en-US', options); // getMonth() returns 0-based month
      const year = new Date(data.Date).getFullYear();
      const monthlySheet = await MonthlySheet.findOne({ UserId, Month: month, Year: year });
      if (!monthlySheet) {
        // Create new monthly sheet entry if it doesn't exist
        const newMonthlySheet = new MonthlySheet({ UserId, Month: month, Year: year });
        
        const { NbrJTrav, NbrJConge, NbrJFeries, NbrHours } = monthlySheet;
        const isWorkingDay = TypeJ !== 'Congé' && TypeJ !== 'Férié';
        const newNbrJTrav = isWorkingDay ? (NbrJTrav || 0) + 1 : NbrJTrav;
        const newNbrJConge = TypeJ === 'Congé' ? (NbrJConge || 0) + 1 : NbrJConge;
        const newNbrJFeries = TypeJ === 'Férié' ? (NbrJFeries || 0) + 1 : NbrJFeries;
        const newNbrHours = (NbrHours || 0) + parseFloat(req.body.TimeF) - parseFloat(req.body.Timed);
        monthlySheet.set({ NbrJTrav: newNbrJTrav, NbrJConge: newNbrJConge, NbrJFeries: newNbrJFeries, NbrHours: newNbrHours });
        await newMonthlySheet.save();
        
      } else {
        // Update existing monthly sheet entry with new daily sheet data
        const { NbrJTrav, NbrJConge, NbrJFeries, NbrHours } = monthlySheet;
        const isWorkingDay = TypeJ !== 'Congé' && TypeJ !== 'Férié';
        const newNbrJTrav = isWorkingDay ? (NbrJTrav || 0) + 1 : NbrJTrav;
        const newNbrJConge = TypeJ === 'Congé' ? (NbrJConge || 0) + 1 : NbrJConge;
        const newNbrJFeries = TypeJ === 'Férié' ? (NbrJFeries || 0) + 1 : NbrJFeries;
        const newNbrHours = (NbrHours || 0) + parseFloat(req.body.TimeF) - parseFloat(req.body.Timed);
        monthlySheet.set({ NbrJTrav: newNbrJTrav, NbrJConge: newNbrJConge, NbrJFeries: newNbrJFeries, NbrHours: newNbrHours });
        await monthlySheet.save();
      }
      
      res.status(201).send(dailySheet);
    } catch (error) {
      console.error(error);
      res.status(500).send(error.message);
    }
  
  })





















  
const ProjectManagement = () => {
    const [taskData, setTaskData] = useState([]);
    const [userData, setUserData] = useState([]);

    useEffect(() => {
        // Fetch task data
        const fetchTaskData = async () => {
            const response = await fetch('http://localhost:3000/task/allTasks');
            const data = await response.json();
            setTaskData(data);
        };
        fetchTaskData();
    }, []);

    useEffect(() => {
        // Fetch user data
        const fetchUserData = async () => {
            const response = await fetch('http://localhost:3000/user/allUsers');
            const data = await response.json();
            setUserData(data);
        };
        fetchUserData();
    }, []);

    // Extract unique project names from task data
    const projectNames = [...new Set(taskData.map(task => task.ProjectName))];

    // Generate table rows for each user
    const tableRows = taskData.reduce((rows, task) => {
        const { UserId, ProjectName, TotlHours } = task;
        const user = userData.find(user => user._id === UserId);
        const userName = user ? `${user.FirstName} ${user.LastName}` : '';
        const userRowIndex = rows.findIndex(row => row.userName === userName);
        if (userRowIndex === -1) {
            // Create a new row for this user
            rows.push({ userName, projects: { [ProjectName]: TotlHours } });
        } else {
            // Add total hours for this project to existing row for this user
            const projects = rows[userRowIndex].projects;
            projects[ProjectName] = (projects[ProjectName] || 0) + TotlHours;
        }
        return rows;
    }, []).map((row, rowIndex) => {
        // Generate table columns for each project
        const tableColumns = projectNames.map((projectName, columnIndex) => {
            const totalHours = row.projects[projectName] || 0;
            return <td key={`${rowIndex}-${columnIndex}`}>{totalHours}</td>;
        });
        return (

           
            <tr key={rowIndex}>
                <th>{row.userName}</th>
                {tableColumns}
            </tr>


        );
    });

    return (
        <div>
            <div className="head-title">
                <div className="left">
                    <h1>Project Management</h1>
                    <ul className="breadcrumb">
                        <li>
                            <a href="#">Dashboard</a>
                        </li>
                        <li>
                            <i className="bx bx-chevron-right"></i>
                        </li>
                        <li>
                            <a className="active" href="#">
                                Project Management
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
            <div className="table-data">
                <div className="order">
                    <div className="head">
                        <h3>Project Management</h3>
                        <i className="bx bx-search"></i>
                        <i className="bx bx-filter"></i>
                    </div>
                    <div className="table-wrapper">
                        <table className="fl-table">
                            <thead>
                                <tr>
                                    <th>Users / Projects</th>
                                    {projectNames.map((projectName, index) => (
                                        <th key={index}>{projectName}</th>
                                    ))}
                                </tr>
                            
                                {tableRows}
                            </thead>





                        </table>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ProjectManagement;












// Generate table row for total hours per user
    /*const totalUserRow = (
        <tr key="total-user-row">

            {projectNames.map((projectName, columnIndex) => {
                const totalHours = tableRows.reduce(
                    (sum, row) => (row.projects[projectName] ? sum + row.projects[projectName] : sum),
                    0
                );
                return <td key={`total-user-${columnIndex}`}>{totalHours}</td>;
            })}

        </tr>
    );

    // Generate table row for total hours per project
    const totalProjectRow = (
        <tr key="total-project-row">
            <th>Total Hours</th>
            {projectColumns}
            <td>{taskData.reduce((sum, task) => sum + task.TotlHours, 0)}</td>
        </tr>
    );*/




































///////////////////////////////////////////////////////











/*


import axios from "axios"
import { useState } from "react"
import { useEffect } from "react";
import jwtDecode from 'jwt-decode';
import MonthCard from "../secondary -components/MonthCard";



function getUserIdFromToken(token) {
  try {
    const decodedToken = jwtDecode(token);

    return decodedToken._id;

  } catch (error) {
    console.log(error);
    return null;
  }
}
function getUserName(token) {
  try {
    const decodedToken = jwtDecode(token);

    return decodedToken.FirstName;

  } catch (error) {
    console.log(error);
    return null;
  }
}



const User = () => {
  //DailySheet Form : 
  const [date, setdate] = useState('')
  const [TypeJ, setTypeJ] = useState('')
  const [ProjectName, setProjectName] = useState('')
  const [Task, setTask] = useState('')
  const [Timed, setTimed] = useState('')
  const [TimeF, setTimeFinsih] = useState("");
  const [Location, setLocation] = useState("");
  const [VehiclePrice, setVehiclePrice] = useState("");
  const [error, setError] = useState("");
  const [Projects, setProjects] = useState([]);
  const [pickupPlace, setPickupPlace] = useState("");

console.log(date)

console.log(Timed)

console.log(TimeF)










  //Extract UserId  from token : 

  const userToken = localStorage.getItem('token');
  const userId = getUserIdFromToken(userToken);
  const Username = getUserName(userToken)
  const [MonthlySheet, setMonthlySheet] = useState([]);
  const [show, setshow] = useState(false);
  const today = new Date();
  const currentYear = today.getFullYear();
  const [Year, setYear] = useState(currentYear);

  const Years = Array.from({ length: 50 }, (v, i) => currentYear - i);




  const handleSelect = (event) => {
    setYear(event.target.value);
    console.log(Year)
  };

  useEffect(() => {

    axios.get('http://127.0.0.1:3000/project/allprojects')
      .then((res) => {
        const filteredProjects = res.data.filter(project => project.Status === false);
        setProjects(filteredProjects);
        console.log(filteredProjects)
      })
      .catch(error => console.error(error));

    const fetchMonthlySheet = async () => {
      try {
        const response = await axios.get(`http://127.0.0.1:3000/monthlysheet/allMonthlySheet/${userId}`);
        const data = response.data;
        const filteredData = data.filter(task => (task.Year == Year));
        setMonthlySheet(filteredData);
      } catch (error) {
        console.error(error);
      }
    };
    fetchMonthlySheet();


  }, [userId, Year]);




  const handleSubmit = e => {
    e.preventDefault();

    // Make API request
    axios.post(`http://127.0.0.1:3000/dailysheet/CreateDailySheet/${userId}`, {
      date ,
      TypeJ: "travail",
      ProjectName,
      Task,
      Timed ,
      TimeF ,
      Location,
      VehiclePrice
    }, {
      headers: {
        Authorization: `Bearer ${localStorage.getItem('token')}` // Include user token in header
      }
    })
      .then((response) => {
        setError('Task saved');
        setshow(false);
        console.log(response);

      })
      .catch((error) => {
        console.log(error);
        setError('An error occurred, please try again');
      });
  }


  const listMsheet = MonthlySheet.map((Msheet) => (
    <MonthCard key={Msheet._id} Msheet={Msheet} />
  ));


  const handleProjectChange = (e) => {
    setProjectName(e.target.value);

  }

  const handlePickupPlaceChange = (event) => {
    setPickupPlace(event.target.value);
  };




  return (
    <div>

      <div className={show ? "box-1" : "box-2"}>

        <div className="animated bounceInDown">
          <div className="container3">
            <div className="daily">
              <h4>Smart <span>Business Solution</span></h4>
              <img width="300px" src="sbs.png"></img>

            </div>
            {error && <span className="error animated tada">{error}</span>}

            <form name="form1" className=" myForm box" id="login" method="post" onSubmit={handleSubmit}  >



              <fieldset id="customer">
                <label for="pickup_time">Pickup Date/Time</label>
                <input
                  type="date"
                  name="Date"
                  id="Date"
                  value={date}
                  onChange={(e) => setdate(e.target.value)}
                  placeholder="Date"
                  autoComplete="off"
                />



              </fieldset>

              <fieldset id="taxi">

                <label for="pickup_time">Start Time</label>
                <input
                  type="time"
                  name="Timed"
                  id="Timed"
                  value={Timed}
                  onChange={(e) => setTimed(e.target.value)}
                  placeholder=" Timed"
                  autoComplete="off"
                />
                <label for="pickup_time">Finish Time</label>
                <input
                  type="time"
                  name="TimeF"
                  id="TimeF"
                  value={TimeF}
                  onChange={(e) => setTimeFinsih(e.target.value)}
                  placeholder="TimeF"
                  autoComplete="off"
                />
              </fieldset>



              <fieldset id="pickup">

                <select name="pickup_place" id="pickup_place" onChange={handleProjectChange} >
                  <option value="" selected="selected">Select Project </option>
                  {Projects.map(project => (
                    <option key={project._id} value={project.ProjectName} >{project.ProjectName}</option>
                  ))}
                </select>


                <select name="pickup_place" id="pickup_place" onChange={handlePickupPlaceChange}>
                  <option value="" selected disabled>Select Transport</option>
                  <option value="office">Taxi</option>
                  <option value="town_hall">Voiture Privé</option>
                </select>

              </fieldset>

              <fieldset id="dropoff">
                {pickupPlace === "office" && (
                  <input
                    type="text"
                    name="vehicle_price"
                    id="vehicle_price"
                    value={VehiclePrice}
                    onChange={(e) => setVehiclePrice(e.target.value)}
                    placeholder="Vehicle Price"
                    autoComplete="off"
                  />
                )}
                <input
                  type="text"
                  name="Location"
                  id="Location"
                  value={Location}
                  onChange={(e) => setLocation(e.target.value)}
                  placeholder="Location"
                  autoComplete="off"
                />

              </fieldset>

              <fieldset id="instructions">


                <input
                  type="text"
                  name="Task"
                  id="Task"
                  value={Task}
                  onChange={(e) => setTask(e.target.value)}
                  placeholder="Task"
                  autoComplete="off"
                />
              </fieldset>

              <input type="submit" value="Done" className="btn3" />

            </form>


          </div>


        </div>
      </div>



      <div className="area" >
        <ul className="circles">
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
        </ul>
        <img src={require('../assets/sbs.png')} width="9%" />
        <div className="Userinfo">
          <div className="Username">Hello ! {Username}</div>
          <img src={require('../assets/User.png')} width="7.5%" height="6%" />


        </div>

      </div >



      <div className=" animated bounceInDown" >

        <div className={show ? " blur  container2" : "container2"}>
          <button class="button-30" onClick={() => { setshow(!show) }} role="button">Add Dailysheet</button> <br></br>
          <button class="button-30" role="button">Add Off day</button>

          <div className="Datepicker">
            <label htmlFor="year">Select Year:</label>
            <select id="year" className="yearpicker" value={Year} onChange={handleSelect}>
              {Years.map((year) => (
                <option key={year} value={year}>
                  {year}
                </option>
              ))}
            </select>
          </div>
          <div className="ft-recipe">
            {listMsheet}
          </div>



        </div>

      </div>





    </div>

  );
};
export default User








    */