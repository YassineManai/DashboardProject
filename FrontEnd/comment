/* sign up js : 
  var pwd = document.getElementById('pwd');
    var eye = document.getElementById('eye');

    eye?.addEventListener('click', togglePass);

    function togglePass() {

        eye.classList.toggle('active');

        (pwd.type == 'password') ? pwd.type = 'text' : pwd.type = 'password';
    }
    function checkStuff() {
        var email = document.form1.email;
        var password = document.form1.password;
        var msg = document.getElementById('msg');

        if (email.value == "") {
            msg.style.display = 'block';
            msg.innerHTML = "Please enter your email";
            email.focus();
            return false;
        } else {
            msg.innerHTML = "";
        }

        if (password.value == "") {
            msg.innerHTML = "Please enter your password";
            password.focus();
            return false;
        } else {
            msg.innerHTML = "";
        }
        var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        if (!re.test(email.value)) {
            msg.innerHTML = "Please enter a valid email";
            email.focus();
            return false;
        } else {
            msg.innerHTML = "";
        }
    } 
    
    
    
    
    
    
    Error eli jawouna :3 
    
    
    XHTTP ... ====> App corse lezim importeha mil fou9 
    Throw MidleWhere ==> makech 3ammel Export 
    hyetna khayba

    


     Sidemenu.current.forEach(item => {
        const li = item.parentElement ;
        const funcion handleclick (){
            Sidemenu.current.forEach(i =>{
                i.parentElement.classList.remove('active')
            })
            li.classList.add('active')

        }
    });









router.post('/CreateDailySheet/:id', async (req, res) => {

    try {
        const idUser = req.params.id;
        data = req.body;
        data.UserId = idUser
        Dsheet = new DailySheet(data);
        savedDsheet = await Dsheet.save();
        res.status(200).send(savedDsheet)
    }

    catch (error) {
        res.status(404).send(error)
    }

})
































router.post('/CreateDailySheet/:id', async (req, res) => {

    try {
      const idUser = req.params.id;
      data = req.body;
      data.UserId = idUser
      // Create new daily sheet entry from request body
      const dailySheet = new DailySheet(req.body);
      await dailySheet.save();
      
      // Update monthly sheet for the same user and month
      const options = { month: 'long' };
      const { UserId, Date: dateString, TypeJ } = req.body;
      const month = new Date(dateString).toLocaleString('en-US', options); // getMonth() returns 0-based month
      const year = new Date(data.Date).getFullYear();
      const monthlySheet = await MonthlySheet.findOne({ UserId, Month: month, Year: year });
      if (!monthlySheet) {
        // Create new monthly sheet entry if it doesn't exist
        const newMonthlySheet = new MonthlySheet({ UserId, Month: month, Year: year });
        
        const { NbrJTrav, NbrJConge, NbrJFeries, NbrHours } = monthlySheet;
        const isWorkingDay = TypeJ !== 'Congé' && TypeJ !== 'Férié';
        const newNbrJTrav = isWorkingDay ? (NbrJTrav || 0) + 1 : NbrJTrav;
        const newNbrJConge = TypeJ === 'Congé' ? (NbrJConge || 0) + 1 : NbrJConge;
        const newNbrJFeries = TypeJ === 'Férié' ? (NbrJFeries || 0) + 1 : NbrJFeries;
        const newNbrHours = (NbrHours || 0) + parseFloat(req.body.TimeF) - parseFloat(req.body.Timed);
        monthlySheet.set({ NbrJTrav: newNbrJTrav, NbrJConge: newNbrJConge, NbrJFeries: newNbrJFeries, NbrHours: newNbrHours });
        await newMonthlySheet.save();
        
      } else {
        // Update existing monthly sheet entry with new daily sheet data
        const { NbrJTrav, NbrJConge, NbrJFeries, NbrHours } = monthlySheet;
        const isWorkingDay = TypeJ !== 'Congé' && TypeJ !== 'Férié';
        const newNbrJTrav = isWorkingDay ? (NbrJTrav || 0) + 1 : NbrJTrav;
        const newNbrJConge = TypeJ === 'Congé' ? (NbrJConge || 0) + 1 : NbrJConge;
        const newNbrJFeries = TypeJ === 'Férié' ? (NbrJFeries || 0) + 1 : NbrJFeries;
        const newNbrHours = (NbrHours || 0) + parseFloat(req.body.TimeF) - parseFloat(req.body.Timed);
        monthlySheet.set({ NbrJTrav: newNbrJTrav, NbrJConge: newNbrJConge, NbrJFeries: newNbrJFeries, NbrHours: newNbrHours });
        await monthlySheet.save();
      }
      
      res.status(201).send(dailySheet);
    } catch (error) {
      console.error(error);
      res.status(500).send(error.message);
    }
  
  })





















  
const ProjectManagement = () => {
    const [taskData, setTaskData] = useState([]);
    const [userData, setUserData] = useState([]);

    useEffect(() => {
        // Fetch task data
        const fetchTaskData = async () => {
            const response = await fetch('http://localhost:3000/task/allTasks');
            const data = await response.json();
            setTaskData(data);
        };
        fetchTaskData();
    }, []);

    useEffect(() => {
        // Fetch user data
        const fetchUserData = async () => {
            const response = await fetch('http://localhost:3000/user/allUsers');
            const data = await response.json();
            setUserData(data);
        };
        fetchUserData();
    }, []);

    // Extract unique project names from task data
    const projectNames = [...new Set(taskData.map(task => task.ProjectName))];

    // Generate table rows for each user
    const tableRows = taskData.reduce((rows, task) => {
        const { UserId, ProjectName, TotlHours } = task;
        const user = userData.find(user => user._id === UserId);
        const userName = user ? `${user.FirstName} ${user.LastName}` : '';
        const userRowIndex = rows.findIndex(row => row.userName === userName);
        if (userRowIndex === -1) {
            // Create a new row for this user
            rows.push({ userName, projects: { [ProjectName]: TotlHours } });
        } else {
            // Add total hours for this project to existing row for this user
            const projects = rows[userRowIndex].projects;
            projects[ProjectName] = (projects[ProjectName] || 0) + TotlHours;
        }
        return rows;
    }, []).map((row, rowIndex) => {
        // Generate table columns for each project
        const tableColumns = projectNames.map((projectName, columnIndex) => {
            const totalHours = row.projects[projectName] || 0;
            return <td key={`${rowIndex}-${columnIndex}`}>{totalHours}</td>;
        });
        return (

           
            <tr key={rowIndex}>
                <th>{row.userName}</th>
                {tableColumns}
            </tr>


        );
    });

    return (
        <div>
            <div className="head-title">
                <div className="left">
                    <h1>Project Management</h1>
                    <ul className="breadcrumb">
                        <li>
                            <a href="#">Dashboard</a>
                        </li>
                        <li>
                            <i className="bx bx-chevron-right"></i>
                        </li>
                        <li>
                            <a className="active" href="#">
                                Project Management
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
            <div className="table-data">
                <div className="order">
                    <div className="head">
                        <h3>Project Management</h3>
                        <i className="bx bx-search"></i>
                        <i className="bx bx-filter"></i>
                    </div>
                    <div className="table-wrapper">
                        <table className="fl-table">
                            <thead>
                                <tr>
                                    <th>Users / Projects</th>
                                    {projectNames.map((projectName, index) => (
                                        <th key={index}>{projectName}</th>
                                    ))}
                                </tr>
                            
                                {tableRows}
                            </thead>





                        </table>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ProjectManagement;












// Generate table row for total hours per user
    /*const totalUserRow = (
        <tr key="total-user-row">

            {projectNames.map((projectName, columnIndex) => {
                const totalHours = tableRows.reduce(
                    (sum, row) => (row.projects[projectName] ? sum + row.projects[projectName] : sum),
                    0
                );
                return <td key={`total-user-${columnIndex}`}>{totalHours}</td>;
            })}

        </tr>
    );

    // Generate table row for total hours per project
    const totalProjectRow = (
        <tr key="total-project-row">
            <th>Total Hours</th>
            {projectColumns}
            <td>{taskData.reduce((sum, task) => sum + task.TotlHours, 0)}</td>
        </tr>
    );*/


    */